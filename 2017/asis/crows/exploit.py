from pwn import *
import random
import string
import hashlib

def modular_sqrt(a, p):
    """ Find a quadratic residue (mod p) of 'a'. p
        must be an odd prime.

        Solve the congruence of the form:
            x^2 = a (mod p)
        And returns x. Note that p - x is also a root.

        0 is returned is no square root exists for
        these a and p.

        The Tonelli-Shanks algorithm is used (except
        for some simple cases in which the solution
        is known from an identity). This algorithm
        runs in polynomial time (unless the
        generalized Riemann hypothesis is false).
    """
    # Simple cases
    #
    if legendre_symbol(a, p) != 1:
        return 0
    elif a == 0:
        return 0
    elif p == 2:
        return p
    elif p % 4 == 3:
        return pow(a, (p + 1) / 4, p)

    # Partition p-1 to s * 2^e for an odd s (i.e.
    # reduce all the powers of 2 from p-1)
    #
    s = p - 1
    e = 0
    while s % 2 == 0:
        s /= 2
        e += 1

    # Find some 'n' with a legendre symbol n|p = -1.
    # Shouldn't take long.
    #
    n = 2
    while legendre_symbol(n, p) != -1:
        n += 1

    # Here be dragons!
    # Read the paper "Square roots from 1; 24, 51,
    # 10 to Dan Shanks" by Ezra Brown for more
    # information
    #

    # x is a guess of the square root that gets better
    # with each iteration.
    # b is the "fudge factor" - by how much we're off
    # with the guess. The invariant x^2 = ab (mod p)
    # is maintained throughout the loop.
    # g is used for successive powers of n to update
    # both a and b
    # r is the exponent - decreases with each update
    #
    x = pow(a, (s + 1) / 2, p)
    b = pow(a, s, p)
    g = pow(n, s, p)
    r = e

    while True:
        t = b
        m = 0
        for m in xrange(r):
            if t == 1:
                break
            t = pow(t, 2, p)

        if m == 0:
            return x

        gs = pow(g, 2 ** (r - m - 1), p)
        g = (gs * gs) % p
        x = (x * gs) % p
        b = (b * g) % p
        r = m


def legendre_symbol(a, p):
    """ Compute the Legendre symbol a|p using
        Euler's criterion. p is a prime, a is
        relatively prime to p (if p divides
        a, then a|p = 0)

        Returns 1 if a has a square root modulo
        p, -1 otherwise.
    """
    ls = pow(a, (p - 1) / 2, p)
    return -1 if ls == p - 1 else ls

def cuberoot(a, p):
    if p == 2:
        return a
    if p == 3:
        return a
    if (p%3) == 2:
        return pow(a,(2*p - 1)/3, p)
    if (p%9) == 4:
        root = pow(a,(2*p + 1)/9, p)
        if pow(root,3,p) == a%p:
            return root
        else:
            return None
    if (p%9) == 7:
        root = pow(a,(p + 2)/9, p)
        if pow(root,3,p) == a%p:
            return root
        else:
            return None
    else:
        print "Not implemented yet. See the second paper"

r = remote('146.185.143.84', 13245)

raw_input('pause')

junk = r.recvline()
print junk
junk = r.recvline()
print junk
junk = r.recvline()
print junk
junk = r.recvline()
print junk


line = r.recvline()
target = line[:-1].split()[-1]
print 'target:', target

count = 0
while 1:
  digits = "".join( [random.choice(string.digits) for i in xrange(8)] )
  chars = "".join( [random.choice(string.letters) for i in xrange(15)] )
  sha = hashlib.sha256(chars).hexdigest()
  #print sha[-6:]
  if sha[-6:] == target:
    break
  count += 1
  if count % 100000 == 0:
    print count

r.sendline(chars)

junk = r.recvline()
print junk
junk = r.recvline()
print junk

line_a = r.recvline()
print line_a
line_b = r.recvline()  
print line_b

a = int(line_a[:-1].split()[-1])
b = int(line_b[:-1].split()[-1])

t2 = cuberoot(-a,b)
t = modular_sqrt(t2,b) # +- t, t = x/y

# case 1
success = False
m = (t**6 +a)
if (b % m == 0):
  br = b/m
  y6 = br
  y = gmpy2.iroot(y6,6)
  if y[1]:
    y = int(y[0])
    x = t * y[0]
    success = True

if not success:
  # case 2
  t = (b - t) % b
  m = (t**6 +a)
  if (b % m == 0):
    br = b/m
    y6 = br
    y = gmpy2.iroot(y6,6)
    if y[1]:
      y = int(y[0])
      x = t * y[0]
      success = True

print 'x:', x
print 'y:', y
print 'b:', b
print "x^6 + a * y^6 = ", (x**6 + a * y**6) 
r.sendline(str(x) + ' ' + str(y))

r.interactive()

