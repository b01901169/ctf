import binascii

def longToString(n):
    return binascii.unhexlify("%x" % n)

def find_invpow(x,n):
    """Finds the integer component of the n'th root of x,
    an integer such that y ** n <= x < (y + 1) ** n.
    """
    high = 1
    while high ** n <= x:
        high *= 2
    low = high/2
    while low < high:
        mid = (low + high) // 2
        if low < mid and mid**n < x:
            low = mid
        elif high > mid and mid**n > x:
            high = mid
        else:
            return mid
    return mid + 1

n = 13424849164527521403756445050870196571038349263738328860728317613249912394547060932323343839684520029298203039106900245311207700034998334716959149611895358644568633031617397849308347210593820501716555451154173033706571655255674122830548148839038815803566833653653019696960357273245175186218084671820634535165646244410986848821521497045359119771232569426910756528816902364535437615513324663138656652758275129617581920526670259880911137041290361189153726718489089958915442296994685190645828798055594442546121209940861315828510400441053105782172778256626180221733000
e = 3

print find_invpow(n,e)
opt = longToString(find_invpow(n,e))
print opt
